{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./my.local.storage.service\";\nexport class PermissionService {\n  constructor(localStorageService) {\n    this.localStorageService = localStorageService;\n  }\n  getRoles() {\n    const token = this.localStorageService.g('jwt'); // Retrieve the JWT token\n    if (token) {\n      const decodedToken = jwt_decode(token);\n      return decodedToken['role'] || [];\n    } else {\n      return [];\n    }\n  }\n}\nPermissionService.ɵfac = function PermissionService_Factory(t) {\n  return new (t || PermissionService)(i0.ɵɵinject(i1.MyLocalStorageService));\n};\nPermissionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PermissionService,\n  factory: PermissionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,OAAOA,UAAU,MAAM,YAAY;;;AAInC,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,mBAA0C;IAA1C,wBAAmB,GAAnBA,mBAAmB;EAA2B;EAElEC,QAAQ;IACN,MAAMC,KAAK,GAAG,IAAI,CAACF,mBAAmB,CAACG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACjD,IAAID,KAAK,EAAE;MACT,MAAME,YAAY,GAAQP,UAAU,CAACK,KAAK,CAAC;MAC3C,OAAOE,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;KAClC,MAAM;MACL,OAAO,EAAE;;EAEb;;AAZWN,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAO,SAAjBP,iBAAiB;EAAAQ,YAFhB;AAAM","names":["jwt_decode","PermissionService","constructor","localStorageService","getRoles","token","g","decodedToken","factory","providedIn"],"sourceRoot":"","sources":["D:\\Inforce\\UrlShortener\\UrlShortener\\ClientApp\\src\\app\\services\\permission.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MyLocalStorageService } from './my.local.storage.service';\r\nimport jwt_decode from 'jwt-decode';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionService {\r\n\r\n  constructor(private localStorageService: MyLocalStorageService) { }\r\n\r\n  getRoles(): string[] {\r\n    const token = this.localStorageService.g('jwt'); // Retrieve the JWT token\r\n    if (token) {\r\n      const decodedToken: any = jwt_decode(token);\r\n      return decodedToken['role'] || [];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}