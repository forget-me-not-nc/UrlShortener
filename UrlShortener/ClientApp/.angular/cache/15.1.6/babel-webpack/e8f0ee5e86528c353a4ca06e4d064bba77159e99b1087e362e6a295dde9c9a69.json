{"ast":null,"code":"import { tap } from 'rxjs';\nimport { LocalStorageConfig } from '../config/local.storage.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./my.local.storage.service\";\nimport * as i2 from \"./role.service\";\nimport * as i3 from \"@angular/router\";\nexport class JwtInterceptor {\n  constructor(localStorageService, roleService, router) {\n    this.localStorageService = localStorageService;\n    this.roleService = roleService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    const token = this.localStorageService.get(LocalStorageConfig.JWT);\n    if (token) {\n      console.log(\"fdfsdfsd\");\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(tap(() => {}, error => {\n      if (error.status === 401) {\n        this.roleService.flushRoles();\n        this.router.navigate(['/login']);\n      }\n      ;\n    }));\n  }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(i0.ɵɵinject(i1.MyLocalStorageService), i0.ɵɵinject(i2.MyRoleService), i0.ɵɵinject(i3.Router));\n};\nJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtInterceptor,\n  factory: JwtInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,GAAG,QAAQ,MAAM;AAEtC,SAASC,kBAAkB,QAAQ,gCAAgC;;;;;AAKnE,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,mBAA0C,EAC1CC,WAA0B,EAC1BC,MAAc;IAFd,wBAAmB,GAAnBF,mBAAmB;IACnB,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;EAAW;EAErCC,SAAS,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACN,mBAAmB,CAACO,GAAG,CAACV,kBAAkB,CAACW,GAAG,CAAC;IAClE,IAAIF,KAAK,EAAE;MACTG,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvBN,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUP,KAAK;;OAEjC,CAAC;;IAEJ,OAAOD,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC,CAACW,IAAI,CAACnB,GAAG,CAAC,MAAK,CAAE,CAAC,EAAGoB,KAAK,IAAI;MAGvD,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAAChB,WAAW,CAACiB,UAAU,EAAE;QAC7B,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MACjC;IACH,CAAC,CAAC,CAAC;EACL;;AA1BWrB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;AAAA","names":["tap","LocalStorageConfig","JwtInterceptor","constructor","localStorageService","roleService","router","intercept","request","next","token","get","JWT","console","log","clone","setHeaders","Authorization","handle","pipe","error","status","flushRoles","navigate","factory"],"sourceRoot":"","sources":["D:\\Inforce\\UrlShortener\\UrlShortener\\ClientApp\\src\\app\\services\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { \r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { MyLocalStorageService } from './my.local.storage.service';\r\nimport { LocalStorageConfig } from '../config/local.storage.config';\r\nimport { MyRoleService } from './role.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private localStorageService: MyLocalStorageService,\r\n              private roleService: MyRoleService,\r\n              private router: Router) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.localStorageService.get(LocalStorageConfig.JWT);\r\n    if (token) {\r\n      console.log(\"fdfsdfsd\");\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n    }\r\n    return next.handle(request).pipe(tap(() => {}, (error) => {\r\n\r\n      \r\n      if (error.status === 401) {  \r\n        this.roleService.flushRoles();\r\n        this.router.navigate(['/login']);\r\n      };\r\n    }));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}