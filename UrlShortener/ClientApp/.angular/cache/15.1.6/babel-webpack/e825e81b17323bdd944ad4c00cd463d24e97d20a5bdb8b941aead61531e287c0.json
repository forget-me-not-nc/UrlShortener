{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport jwt_decode from 'jwt-decode';\nlet MyRoleService = class MyRoleService {\n  constructor(localStorageService, print) {\n    this.localStorageService = localStorageService;\n  }\n  getRolesFromJwt() {\n    const token = this.localStorageService.get('jwt');\n    if (token) {\n      const decodedToken = jwt_decode(token);\n      return decodedToken['role'] || [];\n    } else {\n      return [];\n    }\n  }\n  setRoles(roles) {}\n  getRoles() {}\n  flushRoles() {}\n};\nMyRoleService = __decorate([Injectable({\n  providedIn: 'root'\n})], MyRoleService);\nexport { MyRoleService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,OAAOC,UAAU,MAAM,YAAY;AAO5B,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAExBC,YAAoBC,mBAA0C,EAClDC,KAAK;IADG,wBAAmB,GAAnBD,mBAAmB;EAClB;EAErBE,eAAe;IACb,MAAMC,KAAK,GAAG,IAAI,CAACH,mBAAmB,CAACI,GAAG,CAAC,KAAK,CAAC;IACjD,IAAID,KAAK,EAAE;MACT,MAAME,YAAY,GAAQR,UAAU,CAACM,KAAK,CAAC;MAC3C,OAAOE,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;KAClC,MAAM;MACL,OAAO,EAAE;;EAEb;EAEAC,QAAQ,CAACC,KAAe,GAExB;EAEAC,QAAQ,IAER;EAEAC,UAAU,IAEV;CACD;AA1BYX,aAAa,eAHzBF,UAAU,CAAC;EACVc,UAAU,EAAE;CACb,CAAC,GACWZ,aAAa,CA0BzB;SA1BYA,aAAa","names":["Injectable","jwt_decode","MyRoleService","constructor","localStorageService","print","getRolesFromJwt","token","get","decodedToken","setRoles","roles","getRoles","flushRoles","providedIn"],"sourceRoot":"","sources":["D:\\Inforce\\UrlShortener\\UrlShortener\\ClientApp\\src\\app\\services\\permission.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MyLocalStorageService } from './my.local.storage.service';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { NgxRolesService } from 'ngx-permissions';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MyRoleService {\r\n\r\n  constructor(private localStorageService: MyLocalStorageService\r\n              print) { }\r\n\r\n  getRolesFromJwt(): string[] {\r\n    const token = this.localStorageService.get('jwt'); \r\n    if (token) {\r\n      const decodedToken: any = jwt_decode(token);\r\n      return decodedToken['role'] || [];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  setRoles(roles: string[]) {\r\n\r\n  }\r\n\r\n  getRoles(): string[] {\r\n\r\n  }\r\n\r\n  flushRoles() {\r\n\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}