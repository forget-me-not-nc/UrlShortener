{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./my.local.storage.service\";\nimport * as i2 from \"ngx-permissions\";\nexport class MyRoleService {\n  constructor(localStorageService, ngxRoleService) {\n    this.localStorageService = localStorageService;\n    this.ngxRoleService = ngxRoleService;\n  }\n  getRolesFromJwt() {\n    const token = this.localStorageService.get('jwt');\n    if (token) {\n      const decodedToken = jwt_decode(token);\n      return decodedToken['role'] || [];\n    } else {\n      return [];\n    }\n  }\n  setRoles() {\n    var roles = this.getRolesFromJwt();\n    roles.forEach(role => {\n      this.ngxRoleService.addRole(role, permissions);\n    });\n    this.getRolesFromJwt().forEach(el => this.ngxRoleService.addRole(el, []));\n  }\n  flushRoles() {\n    this.ngxRoleService.flushRoles();\n  }\n}\nMyRoleService.ɵfac = function MyRoleService_Factory(t) {\n  return new (t || MyRoleService)(i0.ɵɵinject(i1.MyLocalStorageService), i0.ɵɵinject(i2.NgxRolesService));\n};\nMyRoleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MyRoleService,\n  factory: MyRoleService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,OAAOA,UAAU,MAAM,YAAY;;;;AAOnC,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,mBAA0C,EAC1CC,cAA+B;IAD/B,wBAAmB,GAAnBD,mBAAmB;IACnB,mBAAc,GAAdC,cAAc;EAAqB;EAE/CC,eAAe;IACrB,MAAMC,KAAK,GAAG,IAAI,CAACH,mBAAmB,CAACI,GAAG,CAAC,KAAK,CAAC;IACjD,IAAID,KAAK,EAAE;MACT,MAAME,YAAY,GAAQR,UAAU,CAACM,KAAK,CAAC;MAC3C,OAAOE,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;KAClC,MAAM;MACL,OAAO,EAAE;;EAEb;EAEAC,QAAQ;IACN,IAAIC,KAAK,GAAG,IAAI,CAACL,eAAe,EAAE;IAClCK,KAAK,CAACC,OAAO,CAAEC,IAAY,IAAI;MAE7B,IAAI,CAACR,cAAc,CAACS,OAAO,CAACD,IAAI,EAAEE,WAAW,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,CAACT,eAAe,EAAE,CAACM,OAAO,CAC5BI,EAAE,IAAI,IAAI,CAACX,cAAc,CAACS,OAAO,CAACE,EAAE,EAAE,EAAE,CAAC,CAC1C;EACH;EAEAC,UAAU;IACR,IAAI,CAACZ,cAAc,CAACY,UAAU,EAAE;EAClC;;AA7BWf,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAgB,SAAbhB,aAAa;EAAAiB,YAFZ;AAAM","names":["jwt_decode","MyRoleService","constructor","localStorageService","ngxRoleService","getRolesFromJwt","token","get","decodedToken","setRoles","roles","forEach","role","addRole","permissions","el","flushRoles","factory","providedIn"],"sourceRoot":"","sources":["D:\\Inforce\\UrlShortener\\UrlShortener\\ClientApp\\src\\app\\services\\permission.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MyLocalStorageService } from './my.local.storage.service';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { NgxRolesService } from 'ngx-permissions';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MyRoleService {\r\n\r\n  constructor(private localStorageService: MyLocalStorageService,\r\n              private ngxRoleService: NgxRolesService) { }\r\n\r\n  private getRolesFromJwt(): string[] {\r\n    const token = this.localStorageService.get('jwt'); \r\n    if (token) {\r\n      const decodedToken: any = jwt_decode(token);\r\n      return decodedToken['role'] || [];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  setRoles() {\r\n    var roles = this.getRolesFromJwt();\r\n    roles.forEach((role: string) => {\r\n  \r\n      this.ngxRoleService.addRole(role, permissions);\r\n    });\r\n\r\n    this.getRolesFromJwt().forEach(\r\n      el => this.ngxRoleService.addRole(el, [])\r\n    );\r\n  }\r\n\r\n  flushRoles() {\r\n    this.ngxRoleService.flushRoles();\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}