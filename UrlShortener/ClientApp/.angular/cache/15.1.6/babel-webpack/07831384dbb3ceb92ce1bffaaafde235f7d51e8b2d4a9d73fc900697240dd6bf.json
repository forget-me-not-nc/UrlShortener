{"ast":null,"code":"import { LocalStorageConfig } from '../config/local.storage.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./my.local.storage.service\";\nexport class JwtInterceptor {\n  constructor(localStorageService) {\n    this.localStorageService = localStorageService;\n  }\n  intercept(request, next) {\n    const token = this.localStorageService.get(LocalStorageConfig.JWT);\n    if (token) {\n      console.log(\"fdfsdfsd\");\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(i0.ɵɵinject(i1.MyLocalStorageService));\n};\nJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtInterceptor,\n  factory: JwtInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AASA,SAASA,kBAAkB,QAAQ,gCAAgC;;;AAGnE,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,mBAA0C;IAA1C,wBAAmB,GAAnBA,mBAAmB;EAA0B;EAEjEC,SAAS,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACJ,mBAAmB,CAACK,GAAG,CAACR,kBAAkB,CAACS,GAAG,CAAC;IAClE,IAAIF,KAAK,EAAE;MACTG,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvBN,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUP,KAAK;;OAEjC,CAAC;;IAEJ,OAAOD,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;EAC7B;;AAjBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;AAAA","names":["LocalStorageConfig","JwtInterceptor","constructor","localStorageService","intercept","request","next","token","get","JWT","console","log","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["D:\\Inforce\\UrlShortener\\UrlShortener\\ClientApp\\src\\app\\services\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { \r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { MyLocalStorageService } from './my.local.storage.service';\r\nimport { LocalStorageConfig } from '../config/local.storage.config';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private localStorageService: MyLocalStorageService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.localStorageService.get(LocalStorageConfig.JWT);\r\n    if (token) {\r\n      console.log(\"fdfsdfsd\");\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n    }\r\n    return next.handle(request);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}